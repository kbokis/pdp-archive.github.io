#include <cstdio>
using namespace std;
const long MAXN = 400005;
// Πίνακας με id προϊσταμένων
long P[MAXN];
// Πίνακας με φύλο εργαζομένων
char S[MAXN];
// Μεταβλητή για το αποτέλεσμα (r_m - r_f)
long D;
// Πίνακες δυναμικού προγραμματισμού πλήθους ιεραρχικά ανώτερων για κάθε φύλο
long CNT_M[MAXN], CNT_F[MAXN];
// Αναδρομική συνάρτηση υπολογισμών
void dp(long id) {
    // Αν δεν έχουν γίνει οι υπολογισμοί του προϊσταμένου σου τότε κάνε τους
    if (CNT_M[P[id]] == -1)
        dp(P[id]);
    // Τα πλήθη ιεραρχικά ανώτερων κάθε φύλου είναι ίσα με του προϊσταμένου...
    CNT_M[id] = CNT_M[P[id]];
    CNT_F[id] = CNT_F[P[id]];
    // ... βάζοντας +1 στο φύλο του προϊσταμένου
    if (S[P[id]] == 'm')
        CNT_M[id]++;
    else
        CNT_F[id]++;
}
int main() {
    freopen("company.in", "r", stdin);
    freopen("company.out", "w", stdout);
    long N;
    scanf("%ld", &N);
    for (long i = 1; i <= N; i++) {
        // Διάβασε τα id των προϊσταμένων και τα φύλα των εργαζομένων
        scanf("%ld %c", &P[i], &S[i]);
        // Το -1 δηλώνει ότι δεν έχουν γίνει οι υπολογισμοί
        if (P[i])
            CNT_M[i] = CNT_F[i] = -1;
    }
    // Ρύθμισε αναδρομικά το D για κάθε εργαζόμενο
    for (long i = 1; i <= N; i++) {
        // Αν δεν έχουν γίνει οι υπολογισμοί κάνε τους
        if (CNT_M[i] == -1)
            dp(i);
        // Ρύθμισε το D ανάλογα με το φύλο του και τους υπολογισμούς
        if (S[i] == 'f')
            D += CNT_M[i];
        else
            D -= CNT_F[i];
    }
    // Εκτύπωσε το αποτέλεσμα
    printf("%ld\n", D);
    return(0);
}
